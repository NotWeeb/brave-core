# Copyright 2020 The Brave Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/. */

import("//brave/build/cargo.gni")
import("//brave/build/rust/config.gni")
import("//brave/test/testing.gni")

config("external_config") {
  defines = [
    "NO_CXXEXCEPTIONS=1"
  ]
}

# Run Cargo build for the Rust project
#
cargo_build("rust_lib") {
  inputs = [
    # Underlying library code
    "../lib/build.rs",
    "../lib/Cargo.lock",
    "../lib/Cargo.toml",
    "../lib/src/classifier/feature_extractor.rs",
    "../lib/src/classifier/mod.rs",
    "../lib/src/classifier/model.c",
    "../lib/src/classifier/model.rs",
    "../lib/src/classifier/model.rs",
    "../lib/src/lib.rs",
    "../lib/src/readability/Cargo.toml",
    "../lib/src/readability/src/dom.rs",
    "../lib/src/readability/src/error.rs",
    "../lib/src/readability/src/extractor.rs",
    "../lib/src/readability/src/lib.rs",
    "../lib/src/readability/src/scorer.rs",
    "../lib/src/rewriter_config_builder.rs",
    "../lib/src/speedreader_heuristics.rs",
    "../lib/src/speedreader_streaming.rs",
    "../lib/src/speedreader.rs",
    "../lib/src/whitelist.rs",
    # FFI
    "Cargo.lock",
    "Cargo.toml",
    "charbuf.rs",
    "errors.rs",
    "lib.rs",
    "speedreader.rs",
  ]

  output = "${target_out_dir}/${cargo_lib_prefix}speedreader_ffi${cargo_lib_suffix}"
  manifest_path = "Cargo.toml"
  build_path = "$target_out_dir"
  target = rustc_target
}

# Generate FFI header from Rust source
cargo_cbindgen("ffi_header") {
  config = "cbindgen.toml"
  output = "speedreader_ffi.h"

  sources = [
    "Cargo.lock",
    "Cargo.toml",
    "cbindgen.toml",
    "charbuf.rs",
    "errors.rs",
    "lib.rs",
    "speedreader.rs",
  ]
}

# Build the FFI wrapper as a static library
static_library("speedreader_ffi") {
  public_configs = [ ":external_config" ]

  sources = [
    "speedreader.cc",
    "speedreader.h"
  ]

  deps = [
    "//base",
    ":rust_lib",
    ":ffi_header",
  ]

  libs = get_target_outputs(":rust_lib")
}
