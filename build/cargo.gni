# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.

import("//brave/build/rust/config.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

# Runs a script to compile a local Cargo package and all of its dependencies
template("cargo_build") {
  action(target_name) {
    script = "//brave/script/cargo.py"

    # make sure rebuilds when files change
    forward_variables_from(invoker, "*")

    outputs = [output]

    args = [
      "--rustup_path=" + rebase_path("//brave/build/rustup/", root_build_dir),
      "--cargo_path=" + rebase_path("//brave/build/rustup/", root_build_dir),
      "--manifest_path=" + rebase_path(manifest_path, root_build_dir),
      "--build_path=" + rebase_path(build_path, root_build_dir),
      "--target=" + target,
      "--is_debug=$is_debug"
    ]

    if (is_mac) {
      args += [ "--mac_deployment_target=" + mac_deployment_target ]
    }

    if (defined(invoker.rust_flags)) {
      args += [ "--rust_flags=$rust_flags" ]
    }

  }
}

# Runs a script to generate C bindings for rust library
template("cargo_cbindgen") {
  action(target_name) {
    script = "//brave/script/cargo_cbindgen.py"

    forward_variables_from(invoker, ["config", "sources", "output"])

    assert(defined(config), "Must specify cbindgen.toml config to use")
    assert(defined(sources), "Must specify sources to generate bindings for")
    assert(defined(output), "Must specify output header file")

    sources += [
      config,
    ]
    outputs = [ "$target_gen_dir/$output" ]

    args = [
      "--rustup_path=" + rebase_path("//brave/build/rustup/", root_build_dir),
      "--cargo_path=" + rebase_path("//brave/build/rustup/", root_build_dir),
      "--target=" + rustc_target,   # defined by //brave/build/rust/config.gni
      "--config=" + rebase_path(config, root_build_dir),
      "--path=" + rebase_path(get_path_info(config, "dir"), root_build_dir),
      "--output=" + rebase_path("$target_gen_dir/$output", root_build_dir),
    ]
  }
}
